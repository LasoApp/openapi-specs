{
  "components": {
    "schemas": {
      "AvatarUrlsBean": {
        "additionalProperties": false,
        "properties": {
          "16x16": {
            "description": "The URL of the item's 16x16 pixel avatar.",
            "format": "uri",
            "type": "string"
          },
          "24x24": {
            "description": "The URL of the item's 24x24 pixel avatar.",
            "format": "uri",
            "type": "string"
          },
          "32x32": {
            "description": "The URL of the item's 32x32 pixel avatar.",
            "format": "uri",
            "type": "string"
          },
          "48x48": {
            "description": "The URL of the item's 48x48 pixel avatar.",
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeDetails": {
        "additionalProperties": false,
        "description": "A change item.",
        "properties": {
          "field": {
            "description": "The name of the field changed.",
            "readOnly": true,
            "type": "string"
          },
          "fieldId": {
            "description": "The ID of the field changed.",
            "readOnly": true,
            "type": "string"
          },
          "fieldtype": {
            "description": "The type of the field changed.",
            "readOnly": true,
            "type": "string"
          },
          "from": {
            "description": "The details of the original value.",
            "readOnly": true,
            "type": "string"
          },
          "fromString": {
            "description": "The details of the original value as a string.",
            "readOnly": true,
            "type": "string"
          },
          "to": {
            "description": "The details of the new value.",
            "readOnly": true,
            "type": "string"
          },
          "toString": {
            "description": "The details of the new value as a string.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Changelog": {
        "additionalProperties": false,
        "description": "A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated.",
        "properties": {
          "author": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetails"
              }
            ],
            "description": "The user who made the change.",
            "readOnly": true
          },
          "created": {
            "description": "The date on which the change took place.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "historyMetadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HistoryMetadata"
              }
            ],
            "description": "The history metadata associated with the changed.",
            "readOnly": true
          },
          "id": {
            "description": "The ID of the changelog.",
            "readOnly": true,
            "type": "string"
          },
          "items": {
            "description": "The list of items changed.",
            "items": {
              "$ref": "#/components/schemas/ChangeDetails"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "FieldMetadata": {
        "additionalProperties": false,
        "description": "The metadata describing an issue field.",
        "properties": {
          "allowedValues": {
            "description": "The list of values allowed in the field.",
            "items": {
              "readOnly": true
            },
            "readOnly": true,
            "type": "array"
          },
          "autoCompleteUrl": {
            "description": "The URL that can be used to automatically complete the field.",
            "readOnly": true,
            "type": "string"
          },
          "configuration": {
            "additionalProperties": {
              "readOnly": true
            },
            "description": "The configuration properties.",
            "readOnly": true,
            "type": "object"
          },
          "defaultValue": {
            "description": "The default value of the field.",
            "readOnly": true
          },
          "hasDefaultValue": {
            "description": "Whether the field has a default value.",
            "readOnly": true,
            "type": "boolean"
          },
          "key": {
            "description": "The key of the field.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the field.",
            "readOnly": true,
            "type": "string"
          },
          "operations": {
            "description": "The list of operations that can be performed on the field.",
            "items": {
              "readOnly": true,
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "required": {
            "description": "Whether the field is required.",
            "readOnly": true,
            "type": "boolean"
          },
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonTypeBean"
              }
            ],
            "description": "The data type of the field.",
            "readOnly": true
          }
        },
        "required": [
          "key",
          "name",
          "operations",
          "required",
          "schema"
        ],
        "type": "object",
        "xml": {
          "name": "availableField"
        }
      },
      "HistoryMetadata": {
        "additionalProperties": true,
        "description": "Details of issue history metadata.",
        "properties": {
          "activityDescription": {
            "description": "The activity described in the history record.",
            "type": "string"
          },
          "activityDescriptionKey": {
            "description": "The key of the activity described in the history record.",
            "type": "string"
          },
          "actor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HistoryMetadataParticipant"
              }
            ],
            "description": "Details of the user whose action created the history record."
          },
          "cause": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HistoryMetadataParticipant"
              }
            ],
            "description": "Details of the cause that triggered the creation the history record."
          },
          "description": {
            "description": "The description of the history record.",
            "type": "string"
          },
          "descriptionKey": {
            "description": "The description key of the history record.",
            "type": "string"
          },
          "emailDescription": {
            "description": "The description of the email address associated the history record.",
            "type": "string"
          },
          "emailDescriptionKey": {
            "description": "The description key of the email address associated the history record.",
            "type": "string"
          },
          "extraData": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional arbitrary information about the history record.",
            "type": "object"
          },
          "generator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HistoryMetadataParticipant"
              }
            ],
            "description": "Details of the system that generated the history record."
          },
          "type": {
            "description": "The type of the history record.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HistoryMetadataParticipant": {
        "additionalProperties": true,
        "description": "Details of user or system associated with a issue history metadata item.",
        "properties": {
          "avatarUrl": {
            "description": "The URL to an avatar for the user or system associated with a history record.",
            "type": "string"
          },
          "displayName": {
            "description": "The display name of the user or system associated with a history record.",
            "type": "string"
          },
          "displayNameKey": {
            "description": "The key of the display name of the user or system associated with a history record.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the user or system associated with a history record.",
            "type": "string"
          },
          "type": {
            "description": "The type of the user or system associated with a history record.",
            "type": "string"
          },
          "url": {
            "description": "The URL of the user or system associated with a history record.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncludedFields": {
        "additionalProperties": false,
        "properties": {
          "actuallyIncluded": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "excluded": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "IssueBean": {
        "additionalProperties": false,
        "description": "Details about an issue.",
        "properties": {
          "changelog": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageOfChangelogs"
              }
            ],
            "description": "Details of changelogs associated with the issue.",
            "readOnly": true
          },
          "editmeta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IssueUpdateMetadata"
              }
            ],
            "description": "The metadata for the fields on the issue that can be amended.",
            "readOnly": true
          },
          "expand": {
            "description": "Expand options that include additional issue details in the response.",
            "readOnly": true,
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "fields": {
            "additionalProperties": {},
            "type": "object"
          },
          "fieldsToInclude": {
            "$ref": "#/components/schemas/IncludedFields"
          },
          "id": {
            "description": "The ID of the issue.",
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "description": "The key of the issue.",
            "readOnly": true,
            "type": "string"
          },
          "names": {
            "additionalProperties": {
              "readOnly": true,
              "type": "string"
            },
            "description": "The ID and name of each field present on the issue.",
            "readOnly": true,
            "type": "object"
          },
          "operations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Operations"
              }
            ],
            "description": "The operations that can be performed on the issue.",
            "readOnly": true
          },
          "properties": {
            "additionalProperties": {
              "readOnly": true
            },
            "description": "Details of the issue properties identified in the request.",
            "readOnly": true,
            "type": "object"
          },
          "renderedFields": {
            "additionalProperties": {
              "readOnly": true
            },
            "description": "The rendered value of each field present on the issue.",
            "readOnly": true,
            "type": "object"
          },
          "schema": {
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonTypeBean"
            },
            "description": "The schema describing each field present on the issue.",
            "readOnly": true,
            "type": "object"
          },
          "self": {
            "description": "The URL of the issue details.",
            "format": "uri",
            "readOnly": true,
            "type": "string"
          },
          "transitions": {
            "description": "The transitions that can be performed on the issue.",
            "items": {
              "$ref": "#/components/schemas/IssueTransition"
            },
            "readOnly": true,
            "type": "array"
          },
          "versionedRepresentations": {
            "additionalProperties": {
              "additionalProperties": {
                "readOnly": true
              },
              "readOnly": true,
              "type": "object"
            },
            "description": "The versions of each field on the issue.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object",
        "xml": {
          "name": "issue"
        }
      },
      "IssueTransition": {
        "additionalProperties": true,
        "description": "Details of an issue transition.",
        "properties": {
          "expand": {
            "description": "Expand options that include additional transition details in the response.",
            "readOnly": true,
            "type": "string"
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMetadata"
            },
            "description": "Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.",
            "readOnly": true,
            "type": "object"
          },
          "hasScreen": {
            "description": "Whether there is a screen associated with the issue transition.",
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the issue transition. Required when specifying a transition to undertake.",
            "type": "string"
          },
          "isAvailable": {
            "description": "Whether the transition is available to be performed.",
            "readOnly": true,
            "type": "boolean"
          },
          "isConditional": {
            "description": "Whether the issue has to meet criteria before the issue transition is applied.",
            "readOnly": true,
            "type": "boolean"
          },
          "isGlobal": {
            "description": "Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.",
            "readOnly": true,
            "type": "boolean"
          },
          "isInitial": {
            "description": "Whether this is the initial issue transition for the workflow.",
            "readOnly": true,
            "type": "boolean"
          },
          "looped": {
            "type": "boolean"
          },
          "name": {
            "description": "The name of the issue transition.",
            "readOnly": true,
            "type": "string"
          },
          "to": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusDetails"
              }
            ],
            "description": "Details of the issue status after the transition.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "IssueUpdateMetadata": {
        "description": "A list of editable field details.",
        "properties": {
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMetadata"
            },
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "JsonTypeBean": {
        "additionalProperties": false,
        "description": "The schema of a field.",
        "properties": {
          "configuration": {
            "additionalProperties": {
              "readOnly": true
            },
            "description": "If the field is a custom field, the configuration of the field.",
            "readOnly": true,
            "type": "object"
          },
          "custom": {
            "description": "If the field is a custom field, the URI of the field.",
            "readOnly": true,
            "type": "string"
          },
          "customId": {
            "description": "If the field is a custom field, the custom ID of the field.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "items": {
            "description": "When the data type is an array, the name of the field items within the array.",
            "readOnly": true,
            "type": "string"
          },
          "system": {
            "description": "If the field is a system field, the name of the field.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The data type of the field.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "LinkGroup": {
        "additionalProperties": false,
        "description": "Details a link group, which defines issue operations.",
        "properties": {
          "groups": {
            "items": {
              "type": "object",
              "additionalProperties": true,
              "description": "A group of link objects"
            },
            "type": "array"
          },
          "header": {
            "$ref": "#/components/schemas/SimpleLink"
          },
          "id": {
            "type": "string"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/SimpleLink"
            },
            "type": "array"
          },
          "styleClass": {
            "type": "string"
          },
          "weight": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Operations": {
        "additionalProperties": true,
        "description": "Details of the operations that can be performed on the issue.",
        "properties": {
          "linkGroups": {
            "description": "Details of the link groups defining issue operations.",
            "items": {
              "$ref": "#/components/schemas/LinkGroup"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "PageOfChangelogs": {
        "additionalProperties": false,
        "description": "A page of changelogs.",
        "properties": {
          "histories": {
            "description": "The list of changelogs.",
            "items": {
              "$ref": "#/components/schemas/Changelog"
            },
            "readOnly": true,
            "type": "array"
          },
          "maxResults": {
            "description": "The maximum number of results that could be on the page.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "startAt": {
            "description": "The index of the first item returned on the page.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "total": {
            "description": "The number of results on the page.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProjectDetails": {
        "additionalProperties": false,
        "description": "Details about a project.",
        "properties": {
          "avatarUrls": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvatarUrlsBean"
              }
            ],
            "description": "The URLs of the project's avatars.",
            "readOnly": true
          },
          "id": {
            "description": "The ID of the project.",
            "type": "string"
          },
          "key": {
            "description": "The key of the project.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the project.",
            "readOnly": true,
            "type": "string"
          },
          "projectCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedProjectCategory"
              }
            ],
            "description": "The category the project belongs to.",
            "readOnly": true
          },
          "projectTypeKey": {
            "description": "The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.",
            "enum": [
              "software",
              "service_desk",
              "business"
            ],
            "readOnly": true,
            "type": "string"
          },
          "self": {
            "description": "The URL of the project details.",
            "readOnly": true,
            "type": "string"
          },
          "simplified": {
            "description": "Whether or not the project is simplified.",
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Scope": {
        "additionalProperties": true,
        "description": "The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).",
        "properties": {
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectDetails"
              }
            ],
            "description": "The project the item has scope in.",
            "readOnly": true
          },
          "type": {
            "description": "The type of scope.",
            "enum": [
              "PROJECT",
              "TEMPLATE"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchResults": {
        "additionalProperties": false,
        "description": "The result of a JQL search.",
        "properties": {
          "expand": {
            "description": "Expand options that include additional search result details in the response.",
            "readOnly": true,
            "type": "string"
          },
          "issues": {
            "description": "The list of issues found by the search.",
            "items": {
              "$ref": "#/components/schemas/IssueBean"
            },
            "readOnly": true,
            "type": "array"
          },
          "maxResults": {
            "description": "The maximum number of results that could be on the page.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "names": {
            "additionalProperties": {
              "readOnly": true,
              "type": "string"
            },
            "description": "The ID and name of each field in the search results.",
            "readOnly": true,
            "type": "object"
          },
          "schema": {
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonTypeBean"
            },
            "description": "The schema describing the field types in the search results.",
            "readOnly": true,
            "type": "object"
          },
          "startAt": {
            "description": "The index of the first item returned on the page.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "total": {
            "description": "The number of results on the page.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "warningMessages": {
            "description": "Any warnings related to the JQL query.",
            "items": {
              "readOnly": true,
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SimpleLink": {
        "additionalProperties": false,
        "description": "Details about the operations available in this version.",
        "properties": {
          "href": {
            "type": "string"
          },
          "iconClass": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "styleClass": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "weight": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object",
        "xml": {
          "name": "link"
        }
      },
      "StatusCategory": {
        "additionalProperties": true,
        "description": "A status category.",
        "properties": {
          "colorName": {
            "description": "The name of the color used to represent the status category.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The ID of the status category.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "key": {
            "description": "The key of the status category.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the status category.",
            "readOnly": true,
            "type": "string"
          },
          "self": {
            "description": "The URL of the status category.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatusDetails": {
        "additionalProperties": true,
        "description": "A status.",
        "properties": {
          "description": {
            "description": "The description of the status.",
            "readOnly": true,
            "type": "string"
          },
          "iconUrl": {
            "description": "The URL of the icon used to represent the status.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The ID of the status.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the status.",
            "readOnly": true,
            "type": "string"
          },
          "scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Scope"
              }
            ],
            "description": "The scope of the field.",
            "readOnly": true
          },
          "self": {
            "description": "The URL of the status.",
            "readOnly": true,
            "type": "string"
          },
          "statusCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusCategory"
              }
            ],
            "description": "The category assigned to the status.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "UpdatedProjectCategory": {
        "additionalProperties": false,
        "description": "A project category.",
        "properties": {
          "description": {
            "description": "The name of the project category.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The ID of the project category.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The description of the project category.",
            "readOnly": true,
            "type": "string"
          },
          "self": {
            "description": "The URL of the project category.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserDetails": {
        "additionalProperties": false,
        "description": "User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:\n\n *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).\n *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.\n *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.",
        "properties": {
          "accountId": {
            "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.",
            "maxLength": 128,
            "type": "string"
          },
          "accountType": {
            "description": "The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)",
            "readOnly": true,
            "type": "string"
          },
          "active": {
            "description": "Whether the user is active.",
            "readOnly": true,
            "type": "boolean"
          },
          "avatarUrls": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvatarUrlsBean"
              }
            ],
            "description": "The avatars of the user.",
            "readOnly": true
          },
          "displayName": {
            "description": "The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.",
            "readOnly": true,
            "type": "string"
          },
          "emailAddress": {
            "description": "The email address of the user. Depending on the user’s privacy settings, this may be returned as null.",
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "description": "This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.",
            "readOnly": true,
            "type": "string"
          },
          "self": {
            "description": "The URL of the user.",
            "readOnly": true,
            "type": "string"
          },
          "timeZone": {
            "description": "The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "doc_node": {
        "type": "object",
        "description": "Root document node for ADF.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "doc"
            ]
          },
          "version": {
            "type": "integer",
            "enum": [
              1
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/paragraph_node"
                },
                {
                  "$ref": "#/components/schemas/heading_node"
                },
                {
                  "$ref": "#/components/schemas/emoji_node"
                },
                {
                  "$ref": "#/components/schemas/codeBlock_node"
                },
                {
                  "$ref": "#/components/schemas/bulletList_node"
                },
                {
                  "$ref": "#/components/schemas/orderedList_node"
                },
                {
                  "$ref": "#/components/schemas/blockquote_node"
                },
                {
                  "$ref": "#/components/schemas/table_node"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "version",
          "content"
        ]
      },
      "paragraph_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "paragraph"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/text_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "text_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          "text": {
            "type": "string",
            "minLength": 1
          },
          "marks": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/link_mark"
                },
                {
                  "$ref": "#/components/schemas/em_mark"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "heading_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "heading"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "level": {
                "type": "integer",
                "minimum": 1,
                "maximum": 6
              }
            }
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/text_node"
            }
          }
        },
        "required": [
          "type",
          "attrs",
          "content"
        ]
      },
      "emoji_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "emoji"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "shortName": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "codeBlock_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "codeBlock"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              }
            }
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/text_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "mediaSingle_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mediaSingle"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/media_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "media_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "media"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "file",
                  "link"
                ]
              }
            }
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "bulletList_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bulletList"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/listItem_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "orderedList_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "orderedList"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/listItem_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "taskList_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "taskList"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taskItem_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "blockquote_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockquote"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paragraph_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "panel_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "panel"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/paragraph_node"
                },
                {
                  "$ref": "#/components/schemas/listItem_node"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "rule_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rule"
            ]
          }
        }
      },
      "table_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "table"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tableRow_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "taskItem_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "taskItem"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "TODO",
                  "DONE"
                ]
              }
            }
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paragraph_node"
            }
          }
        },
        "required": [
          "type",
          "attrs",
          "content"
        ]
      },
      "link_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "link"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string",
                "format": "uri"
              },
              "title": {
                "type": "string"
              }
            },
            "required": [
              "href"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "em_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "em"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "tableRow_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tableRow"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tableCell_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "tableCell_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tableCell"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/paragraph_node"
                },
                {
                  "$ref": "#/components/schemas/codeBlock_node"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "decisionList_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "decisionList"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/decisionItem_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "decisionItem_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "decisionItem"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "DECIDED",
                  "UNDECIDED"
                ]
              }
            }
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paragraph_node"
            }
          }
        },
        "required": [
          "type",
          "attrs",
          "content"
        ]
      },
      "embedCard_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "embedCard"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "URL for the embedded card"
              },
              "layout": {
                "type": "string",
                "enum": [
                  "wide",
                  "full-width",
                  "center"
                ],
                "description": "Layout for the embed card"
              }
            }
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "text_with_multiple_marks_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          "text": {
            "type": "string",
            "minLength": 1
          },
          "marks": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/link_mark"
                },
                {
                  "$ref": "#/components/schemas/em_mark"
                },
                {
                  "$ref": "#/components/schemas/strong_mark"
                },
                {
                  "$ref": "#/components/schemas/strike_mark"
                },
                {
                  "$ref": "#/components/schemas/code_mark"
                },
                {
                  "$ref": "#/components/schemas/subsup_mark"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "strong_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "strong"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "strike_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "strike"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "code_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "code"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "subsup_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "subsup"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sub",
                  "sup"
                ],
                "description": "Specifies subscript or superscript"
              }
            }
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "alignment_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "alignment"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "align": {
                "type": "string",
                "enum": [
                  "left",
                  "right",
                  "center"
                ]
              }
            }
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "indentation_mark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "indentation"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "level": {
                "type": "integer",
                "minimum": 1,
                "maximum": 6,
                "description": "Indentation level"
              }
            }
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "listItem_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "listItem"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paragraph_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "layoutSection_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "layoutSection"
            ]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/layoutColumn_node"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "layoutColumn_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "layoutColumn"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "width": {
                "type": "integer",
                "description": "Width percentage of the layout column"
              }
            }
          },
          "content": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/paragraph_node"
                },
                {
                  "$ref": "#/components/schemas/heading_node"
                },
                {
                  "$ref": "#/components/schemas/codeBlock_node"
                },
                {
                  "$ref": "#/components/schemas/mediaSingle_node"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "attrs",
          "content"
        ]
      },
      "extension_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "extension"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "extensionType": {
                "type": "string",
                "description": "The type of extension"
              },
              "extensionKey": {
                "type": "string",
                "description": "A unique key for the extension"
              },
              "parameters": {
                "type": "object",
                "description": "Additional parameters for the extension"
              }
            },
            "required": [
              "extensionType",
              "extensionKey"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "bodiedExtension_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bodiedExtension"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "extensionType": {
                "type": "string"
              },
              "extensionKey": {
                "type": "string"
              },
              "parameters": {
                "type": "object"
              }
            }
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paragraph_node"
            }
          }
        },
        "required": [
          "type",
          "attrs",
          "content"
        ]
      },
      "inlineExtension_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "inlineExtension"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "extensionType": {
                "type": "string"
              },
              "extensionKey": {
                "type": "string"
              },
              "parameters": {
                "type": "object"
              }
            },
            "required": [
              "extensionType",
              "extensionKey"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "expand_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "expand"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the expand element"
              }
            }
          },
          "content": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/paragraph_node"
                },
                {
                  "$ref": "#/components/schemas/heading_node"
                },
                {
                  "$ref": "#/components/schemas/listItem_node"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "attrs",
          "content"
        ]
      },
      "mention_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mention"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "User ID of the mentioned person"
              },
              "text": {
                "type": "string",
                "description": "Display text of the mention"
              }
            },
            "required": [
              "id",
              "text"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "date_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "date"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp for the date"
              }
            },
            "required": [
              "timestamp"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "placeholder_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "placeholder"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "Placeholder text"
              }
            },
            "required": [
              "text"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "status_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "status"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The status text"
              },
              "color": {
                "type": "string",
                "enum": [
                  "blue",
                  "green",
                  "yellow",
                  "red",
                  "grey"
                ],
                "description": "The color of the status"
              },
              "localId": {
                "type": "string",
                "description": "Unique local ID for the status"
              }
            },
            "required": [
              "text",
              "color",
              "localId"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "inlineCard_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "inlineCard"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri"
              },
              "data": {
                "type": "object",
                "description": "Additional data for the inline card"
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      },
      "blockCard_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockCard"
            ]
          },
          "attrs": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri"
              },
              "data": {
                "type": "object",
                "description": "Additional data for the block card"
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "type",
          "attrs"
        ]
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "description": "OAuth2 scopes for Jira",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.atlassian.com/authorize",
            "scopes": {
              "delete:async-task:jira": "Delete asynchronous task.",
              "delete:attachment:jira": "Delete issue attachments.",
              "delete:avatar:jira": "Delete system and custom avatars.",
              "delete:comment.property:jira": "Delete issue comment properties.",
              "delete:comment:jira": "Delete issue comments.",
              "delete:dashboard.property:jira": "Delete dashboard properties.",
              "delete:dashboard:jira": "Delete dashboards.",
              "delete:field-configuration-scheme:jira": "Delete field configuration schemes.",
              "delete:field-configuration:jira": "Delete field configurations.",
              "delete:field.option:jira": "Delete field options.",
              "delete:field:jira": "Delete fields.",
              "delete:filter.column:jira": "Delete filter columns.",
              "delete:filter:jira": "Delete filters.",
              "delete:group:jira": "Delete user groups.",
              "delete:issue-link-type:jira": "Delete issue link types.",
              "delete:issue-link:jira": "Delete issue links.",
              "delete:issue-type-scheme:jira": "Delete issue type schemes.",
              "delete:issue-type-screen-scheme:jira": "Delete issue type screen schemes.",
              "delete:issue-type.property:jira": "Delete issue type properties.",
              "delete:issue-type:jira": "Delete issue types.",
              "delete:issue-worklog.property:jira": "Delete issue worklog properties.",
              "delete:issue-worklog:jira": "Delete issue worklogs.",
              "delete:issue.property:jira": "Delete issue properties.",
              "delete:issue.remote-link:jira": "Delete issue remote links.",
              "delete:issue:jira": "Delete issues.",
              "delete:permission-scheme:jira": "Delete permission schemes.",
              "delete:permission:jira": "Delete permissions.",
              "delete:project-category:jira": "Delete project categories.",
              "delete:project-role:jira": "Delete project roles.",
              "delete:project-version:jira": "Delete project versions.",
              "delete:project.avatar:jira": "Delete project avatars.",
              "delete:project.component:jira": "Delete project components.",
              "delete:project.property:jira": "Delete project properties.",
              "delete:project:jira": "Delete projects and their details, such as issue types, project lead, and avatars.",
              "delete:screen-scheme:jira": "Delete screen schemes.",
              "delete:screen-tab:jira": "Delete screen tabs.",
              "delete:screen:jira": "Delete screens.",
              "delete:screenable-field:jira": "Delete screenable fields.",
              "delete:user-configuration:jira": "Delete user configurations.",
              "delete:user.property:jira": "Delete user properties.",
              "delete:webhook:jira": "Delete webhooks.",
              "delete:workflow-scheme:jira": "Delete workflow schemes.",
              "delete:workflow.property:jira": "Delete workflow properties.",
              "delete:workflow:jira": "Delete workflows.",
              "manage:jira-configuration": "Configure Jira settings that require the Jira administrators permission, for example, create projects and custom fields, view workflows, manage issue link types.",
              "manage:jira-project": "Create and edit project settings and create new project-level objects, for example, versions, components.",
              "manage:jira-webhook": "Manage Jira webhooks. Enables an OAuth app to register and unregister dynamic webhooks in Jira. It also provides for fetching of registered webhooks.",
              "read:application-role:jira": "View application roles.",
              "read:attachment:jira": "View issue attachments.",
              "read:audit-log:jira": "View audit logs.",
              "read:avatar:jira": "View system and custom avatars.",
              "read:comment.property:jira": "View issue comment properties.",
              "read:comment:jira": "View issue comments.",
              "read:custom-field-contextual-configuration:jira": "Read custom field contextual configurations.",
              "read:dashboard.property:jira": "View dashboard properties.",
              "read:dashboard:jira": "View dashboards.",
              "read:field-configuration-scheme:jira": "View field configuration schemes.",
              "read:field-configuration:jira": "Read field configurations.",
              "read:field.default-value:jira": "View field default values.",
              "read:field.option:jira": "View field options.",
              "read:field.options:jira": "Read field options.",
              "read:field:jira": "View fields.",
              "read:filter.column:jira": "View filter columns.",
              "read:filter.default-share-scope:jira": "View filter default share scopes.",
              "read:filter:jira": "View filters.",
              "read:group:jira": "View user groups.",
              "read:instance-configuration:jira": "View instance configurations.",
              "read:issue-details:jira": "View issue details.",
              "read:issue-event:jira": "Read issue events.",
              "read:issue-field-values:jira": "View issue field valueses.",
              "read:issue-link-type:jira": "View issue link types.",
              "read:issue-link:jira": "View issue links.",
              "read:issue-meta:jira": "View issue meta.",
              "read:issue-security-level:jira": "View issue security levels.",
              "read:issue-security-scheme:jira": "View issue security schemes.",
              "read:issue-status:jira": "View issue statuses.",
              "read:issue-type-hierarchy:jira": "Read issue type hierarchies.",
              "read:issue-type-scheme:jira": "View issue type schemes.",
              "read:issue-type-screen-scheme:jira": "View issue type screen schemes.",
              "read:issue-type.property:jira": "View issue type properties.",
              "read:issue-type:jira": "View issue types.",
              "read:issue-worklog.property:jira": "View issue worklog properties.",
              "read:issue-worklog:jira": "View issue worklogs.",
              "read:issue.changelog:jira": "View issue changelogs.",
              "read:issue.property:jira": "View issue properties.",
              "read:issue.remote-link:jira": "View issue remote links.",
              "read:issue.time-tracking:jira": "View issue time trackings.",
              "read:issue.transition:jira": "View issue transitions.",
              "read:issue.vote:jira": "View issue votes.",
              "read:issue.votes:jira": "View issue voteses.",
              "read:issue.watcher:jira": "View issue watchers.",
              "read:issue:jira": "View issues.",
              "read:jira-expressions:jira": "View jira expressions.",
              "read:jira-user": "View user information in Jira that you have access to, including usernames, email addresses, and avatars.",
              "read:jira-work": "Read project and issue data. Search for issues and objects associated with issues (such as attachments and worklogs).",
              "read:jql:jira": "View JQL.",
              "read:label:jira": "View labels.",
              "read:license:jira": "View licenses.",
              "read:notification-scheme:jira": "View notification schemes.",
              "read:permission-scheme:jira": "View permission schemes.",
              "read:permission:jira": "View permissions.",
              "read:priority:jira": "View priorities.",
              "read:project-category:jira": "View project categories.",
              "read:project-role:jira": "View project roles.",
              "read:project-type:jira": "View project types.",
              "read:project-version:jira": "View project versions.",
              "read:project.avatar:jira": "Read project avatars.",
              "read:project.component:jira": "View project components.",
              "read:project.email:jira": "View project emails.",
              "read:project.feature:jira": "Read project features.",
              "read:project.property:jira": "View project properties.",
              "read:project:jira": "View projects.",
              "read:resolution:jira": "View resolutions.",
              "read:role:jira": "View roles.",
              "read:screen-field:jira": "View screen fields.",
              "read:screen-scheme:jira": "View screen schemes.",
              "read:screen-tab:jira": "View screen tabs.",
              "read:screen:jira": "View screens.",
              "read:screenable-field:jira": "View screenable fields.",
              "read:status:jira": "View statuses.",
              "read:user-configuration:jira": "View user configurations.",
              "read:user.columns:jira": "View user columnses.",
              "read:user.property:jira": "View user properties.",
              "read:user:jira": "View users.",
              "read:webhook:jira": "View webhooks.",
              "read:workflow-scheme:jira": "View workflow schemes.",
              "read:workflow.property:jira": "View workflow properties.",
              "read:workflow:jira": "View workflows.",
              "send:notification:jira": "Send notifications.",
              "validate:jql:jira": "Validate JQL.",
              "write:attachment:jira": "Create and update issue attachments.",
              "write:avatar:jira": "Create and update system and custom avatars.",
              "write:comment.property:jira": "Create and update issue comment properties.",
              "write:comment:jira": "Create and update issue comments.",
              "write:custom-field-contextual-configuration:jira": "Save custom field contextual configurations.",
              "write:dashboard.property:jira": "Create and update dashboard properties.",
              "write:dashboard:jira": "Create and update dashboards.",
              "write:field-configuration-scheme:jira": "Create and update field configuration schemes.",
              "write:field-configuration:jira": "Save field configurations.",
              "write:field.default-value:jira": "Create and update field default values.",
              "write:field.option:jira": "Create and update field options.",
              "write:field:jira": "Create and update fields.",
              "write:filter.column:jira": "Create and update filter columns.",
              "write:filter.default-share-scope:jira": "Create and update filter default share scopes.",
              "write:filter:jira": "Create and update filters.",
              "write:group:jira": "Create and update user groups.",
              "write:instance-configuration:jira": "Create and update instance configurations.",
              "write:issue-link-type:jira": "Create and update issue link types.",
              "write:issue-link:jira": "Create and update issue links.",
              "write:issue-type-scheme:jira": "Create and update issue type schemes.",
              "write:issue-type-screen-scheme:jira": "Create and update issue type screen schemes.",
              "write:issue-type.property:jira": "Create and update issue type properties.",
              "write:issue-type:jira": "Create and update issue types.",
              "write:issue-worklog.property:jira": "Create and update issue worklog properties.",
              "write:issue-worklog:jira": "Create and update issue worklogs.",
              "write:issue.property:jira": "Create and update issue properties.",
              "write:issue.remote-link:jira": "Create and update issue remote links.",
              "write:issue.time-tracking:jira": "Create and update issue time trackings.",
              "write:issue.vote:jira": "Create and update issue votes.",
              "write:issue.watcher:jira": "Create and update issue watchers.",
              "write:issue:jira": "Create and update issues.",
              "write:jira-work": "Create and edit issues in Jira, post comments, create worklogs, and delete issues.",
              "write:permission-scheme:jira": "Create and update permission schemes.",
              "write:permission:jira": "Create and update permissions.",
              "write:project-category:jira": "Create and update project categories.",
              "write:project-role:jira": "Create and update project roles.",
              "write:project-version:jira": "Create and update project versions.",
              "write:project.avatar:jira": "Create and update project avatars.",
              "write:project.component:jira": "Create and update project components.",
              "write:project.email:jira": "Create and update project emails.",
              "write:project.feature:jira": "Save project features.",
              "write:project.property:jira": "Create and update project properties.",
              "write:project:jira": "Create and update projects.",
              "write:screen-scheme:jira": "Create and update screen schemes.",
              "write:screen-tab:jira": "Create and update screen tabs.",
              "write:screen:jira": "Create and update screens.",
              "write:screenable-field:jira": "Create and update screenable fields.",
              "write:user-configuration:jira": "Create and update user configurations.",
              "write:user.property:jira": "Create and update user properties.",
              "write:webhook:jira": "Create and update webhooks.",
              "write:workflow-scheme:jira": "Create and update workflow schemes.",
              "write:workflow.property:jira": "Create and update workflow properties.",
              "write:workflow:jira": "Create and update workflows."
            },
            "tokenUrl": "https://auth.atlassian.com/oauth/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "email": "ecosystem@atlassian.com"
    },
    "description": "Jira Cloud platform REST API documentation",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "http://atlassian.com/terms/",
    "title": "The Jira Cloud platform REST API",
    "version": "1001.0.0-SNAPSHOT-a74c1872dbb34b9f62b4c6fa130a93e7a0779597"
  },
  "openapi": "3.1.0",
  "paths": {
    "/ex/jira/{cloudid}/rest/api/3/search": {
      "get": {
        "deprecated": false,
        "description": "Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nIf the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#per...",
        "operationId": "searchForIssuesUsingJql",
        "parameters": [
          {
            "in": "path",
            "name": "cloudid",
            "schema": {
              "example": "1324a887-45db-1bf4-1e99-ef0ff456d421",
              "type": "string"
            },
            "required": true
          },
          {
            "description": "The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their em...",
            "in": "query",
            "name": "jql",
            "schema": {
              "example": "project = HSP",
              "type": "string"
            },
            "x-showInExample": "true"
          },
          {
            "description": "The index of the first item to return in a page of results (page offset).",
            "in": "query",
            "name": "startAt",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.",
            "in": "query",
            "name": "maxResults",
            "schema": {
              "default": 50,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Determines how to validate the JQL query and treat the validation results. Supported values are:\n\n *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n *  `warn` Returns all errors as warnings.\n *  `none` No validation is perform...",
            "in": "query",
            "name": "validateQuery",
            "schema": {
              "default": "strict",
              "enum": [
                "strict",
                "warn",
                "none",
                "true",
                "false"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExampl...",
            "in": "query",
            "name": "fields",
            "schema": {
              "items": {
                "default": "*navigable",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schem...",
            "in": "query",
            "name": "expand",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property key...",
            "in": "query",
            "name": "properties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Reference fields by their key (rather than ID).",
            "in": "query",
            "name": "fieldsByKeys",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": "{\"expand\":\"names,schema\",\"issues\":[{\"expand\":\"\",\"fields\":{\"watcher\":{\"isWatching\":false,\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers\",\"watchCount\":1,\"watchers\":[{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"}]},\"attachment\":[{\"author\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"accountType\":\"atlassian\",\"active\":false,\"avatarUrls\":{\"16x16\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16\",\"24x24\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24\",\"32x32\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32\",\"48x48\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48\"},\"displayName\":\"Mia Krystof\",\"key\":\"\",\"name\":\"\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"content\":\"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000\",\"created\":\"2022-10-06T07:32:47.000+0000\",\"filename\":\"picture.jpg\",\"id\":10000,\"mimeType\":\"image/jpeg\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/attachments/10000\",\"size\":23123,\"thumbnail\":\"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000\"}],\"sub-tasks\":[{\"id\":\"10000\",\"outwardIssue\":{\"fields\":{\"status\":{\"iconUrl\":\"https://your-domain.atlassian.net/images/icons/statuses/open.png\",\"name\":\"Open\"}},\"id\":\"10003\",\"key\":\"ED-2\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/ED-2\"},\"type\":{\"id\":\"10000\",\"inward\":\"Parent\",\"name\":\"\",\"outward\":\"Sub-task\"}}],\"description\":{\"type\":\"doc\",\"version\":1,\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Main order flow broken\"}]}]},\"project\":{\"avatarUrls\":{\"16x16\":\"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000\",\"24x24\":\"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000\",\"32x32\":\"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000\",\"48x48\":\"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000\"},\"id\":\"10000\",\"insight\":{\"lastIssueUpdateTime\":\"2021-04-22T05:37:05.000+0000\",\"totalIssueCount\":100},\"key\":\"EX\",\"name\":\"Example\",\"projectCategory\":{\"description\":\"First Project Category\",\"id\":\"10000\",\"name\":\"FIRST\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000\"},\"self\":\"https://your-domain.atlassian.net/rest/api/3/project/EX\",\"simplified\":false,\"style\":\"classic\"},\"comment\":[{\"author\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"body\":{\"type\":\"doc\",\"version\":1,\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.\"}]}]},\"created\":\"2021-01-17T12:34:00.000+0000\",\"id\":\"10000\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000\",\"updateAuthor\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"updated\":\"2021-01-18T23:45:00.000+0000\",\"visibility\":{\"identifier\":\"Administrators\",\"type\":\"role\",\"value\":\"Administrators\"}}],\"issuelinks\":[{\"id\":\"10001\",\"outwardIssue\":{\"fields\":{\"status\":{\"iconUrl\":\"https://your-domain.atlassian.net/images/icons/statuses/open.png\",\"name\":\"Open\"}},\"id\":\"10004L\",\"key\":\"PR-2\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/PR-2\"},\"type\":{\"id\":\"10000\",\"inward\":\"depends on\",\"name\":\"Dependent\",\"outward\":\"is depended by\"}},{\"id\":\"10002\",\"inwardIssue\":{\"fields\":{\"status\":{\"iconUrl\":\"https://your-domain.atlassian.net/images/icons/statuses/open.png\",\"name\":\"Open\"}},\"id\":\"10004\",\"key\":\"PR-3\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/PR-3\"},\"type\":{\"id\":\"10000\",\"inward\":\"depends on\",\"name\":\"Dependent\",\"outward\":\"is depended by\"}}],\"worklog\":[{\"author\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"comment\":{\"type\":\"doc\",\"version\":1,\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I did some work here.\"}]}]},\"id\":\"100028\",\"issueId\":\"10002\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000\",\"started\":\"2021-01-17T12:34:00.000+0000\",\"timeSpent\":\"3h 20m\",\"timeSpentSeconds\":12000,\"updateAuthor\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"updated\":\"2021-01-18T23:45:00.000+0000\",\"visibility\":{\"identifier\":\"276f955c-63d7-42c8-9520-92d01dca0625\",\"type\":\"group\",\"value\":\"jira-developers\"}}],\"updated\":1,\"timetracking\":{\"originalEstimate\":\"10m\",\"originalEstimateSeconds\":600,\"remainingEstimate\":\"3m\",\"remainingEstimateSeconds\":200,\"timeSpent\":\"6m\",\"timeSpentSeconds\":400}},\"id\":\"10002\",\"key\":\"ED-1\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10002\"}],\"maxResults\":50,\"startAt\":0,\"total\":1,\"warningMessages\":[\"The value 'bar' does not exist for the field 'foo'.\"]}",
                "schema": {
                  "$ref": "#/components/schemas/SearchResults"
                }
              }
            },
            "description": "Returned if the request is successful."
          },
          "400": {
            "description": "Returned if the JQL query is invalid."
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "OAuth2": [
              "read:jira-work"
            ]
          },
          {}
        ],
        "summary": "Search for issues using JQL (GET)",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "OAuth2",
            "scopes": [
              "read:jira-work"
            ],
            "state": "Current"
          },
          {
            "scheme": "OAuth2",
            "scopes": [
              "read:issue-details:jira",
              "read:audit-log:jira",
              "read:avatar:jira",
              "read:field-configuration:jira",
              "read:issue-meta:jira"
            ],
            "state": "Beta"
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/ex/jira/{cloudid}/rest/api/3/issue/{issueIdOrKey}": {
      "get": {
        "deprecated": false,
        "description": "Returns the details for an issue.\n\nThe issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** retur...",
        "operationId": "getIssue",
        "parameters": [
          {
            "in": "path",
            "name": "cloudid",
            "schema": {
              "example": "1324a887-45db-1bf4-1e99-ef0ff456d421",
              "type": "string"
            },
            "required": true
          },
          {
            "description": "The ID or key of the issue.",
            "in": "path",
            "name": "issueIdOrKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  ...",
            "in": "query",
            "name": "fields",
            "schema": {
              "items": {
                "default": "*all",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.",
            "in": "query",
            "name": "fieldsByKeys",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `s...",
            "in": "query",
            "name": "expand",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Return...",
            "in": "query",
            "name": "properties",
            "schema": {
              "items": {
                "default": "null",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.",
            "in": "query",
            "name": "updateHistory",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": "{\"fields\":{\"watcher\":{\"isWatching\":false,\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers\",\"watchCount\":1,\"watchers\":[{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"}]},\"attachment\":[{\"author\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"accountType\":\"atlassian\",\"active\":false,\"avatarUrls\":{\"16x16\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16\",\"24x24\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24\",\"32x32\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32\",\"48x48\":\"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48\"},\"displayName\":\"Mia Krystof\",\"key\":\"\",\"name\":\"\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"content\":\"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000\",\"created\":\"2022-10-06T07:32:47.000+0000\",\"filename\":\"picture.jpg\",\"id\":10000,\"mimeType\":\"image/jpeg\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/attachments/10000\",\"size\":23123,\"thumbnail\":\"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000\"}],\"sub-tasks\":[{\"id\":\"10000\",\"outwardIssue\":{\"fields\":{\"status\":{\"iconUrl\":\"https://your-domain.atlassian.net/images/icons/statuses/open.png\",\"name\":\"Open\"}},\"id\":\"10003\",\"key\":\"ED-2\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/ED-2\"},\"type\":{\"id\":\"10000\",\"inward\":\"Parent\",\"name\":\"\",\"outward\":\"Sub-task\"}}],\"description\":{\"type\":\"doc\",\"version\":1,\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Main order flow broken\"}]}]},\"project\":{\"avatarUrls\":{\"16x16\":\"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000\",\"24x24\":\"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000\",\"32x32\":\"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000\",\"48x48\":\"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000\"},\"id\":\"10000\",\"insight\":{\"lastIssueUpdateTime\":\"2021-04-22T05:37:05.000+0000\",\"totalIssueCount\":100},\"key\":\"EX\",\"name\":\"Example\",\"projectCategory\":{\"description\":\"First Project Category\",\"id\":\"10000\",\"name\":\"FIRST\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000\"},\"self\":\"https://your-domain.atlassian.net/rest/api/3/project/EX\",\"simplified\":false,\"style\":\"classic\"},\"comment\":[{\"author\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"body\":{\"type\":\"doc\",\"version\":1,\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.\"}]}]},\"created\":\"2021-01-17T12:34:00.000+0000\",\"id\":\"10000\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000\",\"updateAuthor\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"updated\":\"2021-01-18T23:45:00.000+0000\",\"visibility\":{\"identifier\":\"Administrators\",\"type\":\"role\",\"value\":\"Administrators\"}}],\"issuelinks\":[{\"id\":\"10001\",\"outwardIssue\":{\"fields\":{\"status\":{\"iconUrl\":\"https://your-domain.atlassian.net/images/icons/statuses/open.png\",\"name\":\"Open\"}},\"id\":\"10004L\",\"key\":\"PR-2\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/PR-2\"},\"type\":{\"id\":\"10000\",\"inward\":\"depends on\",\"name\":\"Dependent\",\"outward\":\"is depended by\"}},{\"id\":\"10002\",\"inwardIssue\":{\"fields\":{\"status\":{\"iconUrl\":\"https://your-domain.atlassian.net/images/icons/statuses/open.png\",\"name\":\"Open\"}},\"id\":\"10004\",\"key\":\"PR-3\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/PR-3\"},\"type\":{\"id\":\"10000\",\"inward\":\"depends on\",\"name\":\"Dependent\",\"outward\":\"is depended by\"}}],\"worklog\":[{\"author\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"comment\":{\"type\":\"doc\",\"version\":1,\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I did some work here.\"}]}]},\"id\":\"100028\",\"issueId\":\"10002\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000\",\"started\":\"2021-01-17T12:34:00.000+0000\",\"timeSpent\":\"3h 20m\",\"timeSpentSeconds\":12000,\"updateAuthor\":{\"accountId\":\"5b10a2844c20165700ede21g\",\"active\":false,\"displayName\":\"Mia Krystof\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\"},\"updated\":\"2021-01-18T23:45:00.000+0000\",\"visibility\":{\"identifier\":\"276f955c-63d7-42c8-9520-92d01dca0625\",\"type\":\"group\",\"value\":\"jira-developers\"}}],\"updated\":1,\"timetracking\":{\"originalEstimate\":\"10m\",\"originalEstimateSeconds\":600,\"remainingEstimate\":\"3m\",\"remainingEstimateSeconds\":200,\"timeSpent\":\"6m\",\"timeSpentSeconds\":400}},\"id\":\"10002\",\"key\":\"ED-1\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10002\"}",
                "schema": {
                  "$ref": "#/components/schemas/IssueBean"
                }
              }
            },
            "description": "Returned if the request is successful."
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing."
          },
          "404": {
            "description": "Returned if the issue is not found or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "OAuth2": [
              "read:jira-work"
            ]
          },
          {}
        ],
        "summary": "Get issue",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "OAuth2",
            "scopes": [
              "read:jira-work"
            ],
            "state": "Current"
          },
          {
            "scheme": "OAuth2",
            "scopes": [
              "read:issue-meta:jira",
              "read:issue-security-level:jira",
              "read:issue.vote:jira",
              "read:issue.changelog:jira",
              "read:avatar:jira",
              "read:issue:jira",
              "read:status:jira",
              "read:user:jira",
              "read:field-configuration:jira"
            ],
            "state": "Beta"
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/oauth/token/accessible-resources": {
      "get": {
        "summary": "Get accessible resources",
        "operationId": "resolveCloudId",
        "description": "Returns the list of resources accessible by the token",
        "responses": {
          "200": {
            "description": "A list of accessible resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Cloud ID of the accessible resource."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the accessible resource."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.atlassian.com/"
    }
  ],
  "tags": []
}